# kserver configuration file example.
#
# Note that in order to read the configuration file, kserver must be
# started with the file path as first argument:
#
# ./kserver /path/to/kserver.conf

################################## REDIS #####################################

# The redis service IP address, if not set, defaults to 127.0.0.1
redis-ip 127.0.0.1

# redis service port, default is 6379 (IANA #815344).
# If port 0 is specified Redis will not listen on a TCP socket.
redis-port 6379

# Redis paging query is the maximum number of query data items per page. 
# This option is mainly used for tracing and recovering data. Default 20
redis-page 20

################################## KSERVER #####################################

# Server port, default 8099
port 8099
# Timeout for network read and network write operations, in milliseconds. 
# If a client intends to keep long-running connection, either increase 
# this value or (better) use keep-alive messages.
# Request timeout in milliseconds, default 10000
request_timeout_ms 10000

# By default kserver does not run as a daemon. Use 'yes' if you need it.
# Note that kserver will write a pid file in /var/run/kserver.pid when daemonized.
daemonize no

# If a pid file is specified, kserver writes it where specified at startup
# and removes it at exit.
#
# When the server runs non daemonized, no pid file is created if none is
# specified in the configuration. When the server is daemonized, the pid file
# is used even if not specified, defaulting to "/var/run/kserver.pid".
#
# Creating a pid file is best effort: if kserver is not able to create it
# nothing bad happens, the server will start and run normally.
pidfile /var/run/kserver.pid

# Domain name used to specify the server for authentication
auth_domain localhost

# Whether to perform domain name identity verification, 
# there are only two options: 'yes' and 'no',default yes
auth_domain_check yes

# Whether to use SSL connection, If the value is ‘no’, 
# the ssl_certificate, ssl_ca_file, ssl_protocol_version
# ssl_cipher_list options will be invalid.
# there are only two options: 'yes' and 'no',default yes
ssl yes

# CivetWeb requires one certificate file in PEM format.
# If you got multiple files from your certificate authority,
# you need to copy their content together into one file.
# Make sure the file has one section BEGIN RSA PRIVATE KEY /
# END RSA PRIVATE KEY, and at least one section
# BEGIN CERTIFICATE / END CERTIFICATE.
# In case you received a file with a section
# BEGIN PRIVATE KEY / END PRIVATE KEY,
# you may get a suitable file by adding the letters RSA manually.
# Set the "ssl_certificate" configuration parameter to the
# file name (including path) of the resulting *.pem file.
ssl_certificate "/home/yrb/kserver/cert/server.pem"

# If you know all your clients, and give them client certificates in
# advance, you can significantly improve security by setting
# "ssl_verify_peer" to "yes" and specifying a client cert (directory)
# using "ssl_ca_file/path". This will lock out all clients without a
# proper certificate.
#
# Require a client cert for your private server (see above)
ssl_ca_file "/home/yrb/kserver/cert/rootCA.pem"

# SSL2+SSL3+TLS1.0+TLS1.1+TLS1.2+TLS1.3	0
# SSL3+TLS1.0+TLS1.1+TLS1.2+TLS1.3	    1
# TLS1.0+TLS1.1+TLS1.2+TLS1.3	        2
# TLS1.1+TLS1.2+TLS1.3	                3
# TLS1.2+TLS1.3	                        4
# TLS1.3	                            5
ssl_protocol_version 4

# In CivetWeb, the ssl_cipher_list configuration option is used to 
# specify a list of cipher suites that the server allows to use. 
# When a client establishes an SSL/TLS connection with a server, 
# both parties negotiate to use a mutually supported cipher suite 
# to encrypt the communication. By setting ssl_cipher_list, 
# server administrators can control which cipher suites are 
# allowed to improve security or compatibility.
ssl_cipher_list TLS_AES_128_GCM_SHA256:AES256-SHA:HIGH:!aNULL:!MD5:!3DES

# Specify the log file name. Also the empty string can be used to force
# kserver to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile ""

# Maximum number of worker threads allowed. CivetWeb handles each 
# incoming connection in a separate thread. Therefore, the value 
# of this option is effectively the number of concurrent HTTP 
# connections CivetWeb can handle.
num_threads 50

# Number of worker threads that should be pre-spawned by mg_start(). Defaults to 0, 
# meaning no worker threads will be pre-spawned at startup; rather, worker threads 
# will be spawned when a new connection comes in and there aren't currently any idle 
# worker threads available to handle it (if we haven't already reached the maximum 
# worker-thread count as specified by num_threads). If this value is specified less 
# than zero, or greater than the value of num_threads, it will be treated as if it 
# was specified to be equal to the value of num_threads.
prespawn_threads 5

# Maximum number of connections waiting to be accepted by the server operating system. 
# Internally, this parameter is passed to the "listen" socket/system call.
listen_backlog 200

# Maximum number of accepted connections waiting to be dispatched by a worker thread.
connection_queue 20